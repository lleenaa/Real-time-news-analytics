version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - bd-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "news_data:1:1"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - bd-network

  spark-master:
    image: bitnami/spark:3.4.2
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - bd-network
    volumes:
      - ./extra-jars:/opt/bitnami/spark/extra-jars

  spark-worker-1:
    image: bitnami/spark:3.4.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    networks:
      - bd-network
    volumes:
     - ./extra-jars:/opt/bitnami/spark/extra-jars

  spark-worker-2:
    image: bitnami/spark:3.4.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    networks:
      - bd-network
    volumes:
     - ./extra-jars:/opt/bitnami/spark/extra-jars

  spark-worker-3:
    image: bitnami/spark:3.4.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    ports:
      - "8083:8081"
    networks:
      - bd-network
    volumes:
      - ./extra-jars:/opt/bitnami/spark/extra-jars

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    networks:
      - bd-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8087:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongo
    networks:
      - bd-network

  news-producer:
    build:
      context: .
      dockerfile: Dockerfile.news
    container_name: news-producer
    depends_on:
      - kafka
      - mongo
    networks:
      - bd-network

  streamlit:
    image: python:3.9
    container_name: streamlit
    command: tail -f /dev/null  
    ports:
      - "8501:8501"
    networks:
      - bd-network
    volumes:
      - .:/app
    working_dir: /app

volumes:
  mongo-data:
  airflow_data:

networks:
  bd-network: